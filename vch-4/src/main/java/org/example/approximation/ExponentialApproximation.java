package org.example.approximation;

import org.example.util.*;

import java.util.ArrayList;
import java.util.List;

public class ExponentialApproximation extends Approximation {

    public ExponentialApproximation(List<double[]> points) {
        super(points);
        calculateCoefficients();
    }

    @Override
    void calculateCoefficients() {
        for (double[] point : getPoints()) {
            if (point[1] <= 0) {
                setCorrect(false);
                return;
            }
        } 
        
        double[][] a = {{sxx(), sx()}, {sx(), n()}};
        double[] b = {sxY(), sY()};
        double[] coefficients = LinearSystemSolver.solve(a, b);

        if (coefficients.length == 0) {
            setCorrect(false);
            return;
        }

        getCoefficients().put("a", Math.exp(coefficients[1]));
        getCoefficients().put("b", coefficients[0]);
    }

    @Override
    public double calculateValue(double x) {
        return getCoefficients().get("a") * Math.exp(getCoefficients().get("b") * x);
    }

    @Override
    public String getName() {
        return "–≠–ö–°–ü–û–ù–ï–ù–¶–ò–ê–õ–¨–ù–ê–Ø –ê–ü–ü–†–û–ö–°–ò–ú–ê–¶–ò–Ø";
    }

    public ArrayList<Object> ans() {
        ArrayList<Object> res = new ArrayList<>();
        res.add(getName());
        if (!isCorrect()) {
            res.add("–ù–∞ –æ—Å–Ω–æ–≤–µ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏—é.");
            return res;
        }
        res.add("–ü–æ–ª—É—á–µ–Ω–Ω–∞—è –∞–ø–ø—Ä–æ–∫—Å–∏–º–∏—Ä—É—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è: y = " + getCoefficients().get("a") + "e^" + getCoefficients().get("b") + "x");

        List<String> headers = List.of("‚Ññ –ø.–ø.", "X", "Y", "y=ae^bx", "Œµi");
        List<List<String>> data = new ArrayList<>();
        List<String> column;
        for (int i = 0; i < getPoints().size(); i++) {
            column = new ArrayList<>();
            double[] point = getPoints().get(i);
            column.add(String.format("%d", (i+1)));
            column.add(String.format("%f", point[0]));
            column.add(String.format("%f", point[1]));
            column.add(String.format("%f", calculateValue(point[0])));
            column.add(String.format("%f", calculateValue(point[0]) - point[1]));
            data.add(column);
        }
        res.add(headers);
        res.add(data);

        res.add("–°—Ä–µ–¥–Ω–µ–∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: ùúπ = " + calculateStandartDeviation());
        res.add("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–µ—Ç–µ—Ä–º–∏–Ω–∞—Ü–∏–∏: R^2 = " + calculateDeterminationCoefficient() + " - " + getDeterminationCoefficientMessage(calculateDeterminationCoefficient()));
        res.add("");
        return res;
    }
    public ArrayList<Double> coefic() {
        ArrayList<Double> cof = new ArrayList<>();
        cof.add(getCoefficients().get("a"));
        cof.add(getCoefficients().get("b"));
        return cof;
    }
}
